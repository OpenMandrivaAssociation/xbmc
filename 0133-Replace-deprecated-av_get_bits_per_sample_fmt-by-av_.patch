From f11edd9246f853c68c144ed5d49ec4c2c111da14 Mon Sep 17 00:00:00 2001
From: Alexis Ballier <aballier@gentoo.org>
Date: Thu, 1 Mar 2012 13:32:32 -0300
Subject: [PATCH 133/145] Replace deprecated av_get_bits_per_sample_fmt by
 av_get_bytes_per_sample. This, in addition, saves a
 couple of divisions. (cherry picked from commit
 1ee1787333460902bb158a4049e87c7ea3abb6e4)

---
 lib/DllAvUtil.h                                              |   10 +++++-----
 xbmc/cores/dvdplayer/DVDCodecs/Audio/DVDAudioCodecFFmpeg.cpp |    2 +-
 .../DVDCodecs/Audio/Encoders/DVDAudioEncoderFFmpeg.cpp       |    4 ++--
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/lib/DllAvUtil.h b/lib/DllAvUtil.h
index f498c7c..990317c 100644
--- a/lib/DllAvUtil.h
+++ b/lib/DllAvUtil.h
@@ -98,7 +98,7 @@ public:
   virtual int av_fifo_generic_read(AVFifoBuffer *f, void *dest, int buf_size, void (*func)(void*, void*, int)) = 0;
   virtual int av_fifo_generic_write(AVFifoBuffer *f, void *src, int size, int (*func)(void*, void*, int)) = 0;
   virtual char *av_strdup(const char *s)=0;
-  virtual int av_get_bits_per_sample_fmt(enum AVSampleFormat p1) = 0;
+  virtual int av_get_bytes_per_sample(enum AVSampleFormat p1) = 0;
   virtual AVDictionaryEntry *av_dict_get(AVDictionary *m, const char *key, const AVDictionaryEntry *prev, int flags) = 0;
   virtual int av_dict_set(AVDictionary **pm, const char *key, const char *value, int flags)=0;
 };
@@ -131,8 +131,8 @@ public:
   virtual int av_fifo_generic_write(AVFifoBuffer *f, void *src, int size, int (*func)(void*, void*, int))
     { return ::av_fifo_generic_write(f, src, size, func); }
   virtual char *av_strdup(const char *s) { return ::av_strdup(s); }
-  virtual int av_get_bits_per_sample_fmt(enum AVSampleFormat p1)
-    { return ::av_get_bits_per_sample_fmt(p1); }
+  virtual int av_get_bytes_per_sample(enum AVSampleFormat p1)
+    { return ::av_get_bytes_per_sample(p1); }
   virtual AVDictionaryEntry *av_dict_get(AVDictionary *m, const char *key, const AVDictionaryEntry *prev, int flags){ return ::av_dict_get(m, key, prev, flags); }
   virtual int av_dict_set(AVDictionary **pm, const char *key, const char *value, int flags) { return ::av_dict_set(pm, key, value, flags); }
 
@@ -171,7 +171,7 @@ class DllAvUtilBase : public DllDynamic, DllAvUtilInterface
   DEFINE_METHOD4(int, av_fifo_generic_read, (AVFifoBuffer *p1, void *p2, int p3, void (*p4)(void*, void*, int)))
   DEFINE_METHOD4(int, av_fifo_generic_write, (AVFifoBuffer *p1, void *p2, int p3, int (*p4)(void*, void*, int)))
   DEFINE_METHOD1(char*, av_strdup, (const char *p1))
-  DEFINE_METHOD1(int, av_get_bits_per_sample_fmt, (enum AVSampleFormat p1))
+  DEFINE_METHOD1(int, av_get_bytes_per_sample, (enum AVSampleFormat p1))
   DEFINE_METHOD4(AVDictionaryEntry *, av_dict_get, (AVDictionary *p1, const char *p2, const AVDictionaryEntry *p3, int p4))
   DEFINE_METHOD4(int, av_dict_set, (AVDictionary **p1, const char *p2, const char *p3, int p4));
 
@@ -195,7 +195,7 @@ class DllAvUtilBase : public DllDynamic, DllAvUtilInterface
     RESOLVE_METHOD(av_fifo_generic_read)
     RESOLVE_METHOD(av_fifo_generic_write)
     RESOLVE_METHOD(av_strdup)
-    RESOLVE_METHOD(av_get_bits_per_sample_fmt)
+    RESOLVE_METHOD(av_get_bytes_per_sample)
     RESOLVE_METHOD(av_dict_get)
     RESOLVE_METHOD(av_dict_set)
   END_METHOD_RESOLVE()
diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Audio/DVDAudioCodecFFmpeg.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Audio/DVDAudioCodecFFmpeg.cpp
index 838a27f..2e8766e 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Audio/DVDAudioCodecFFmpeg.cpp
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Audio/DVDAudioCodecFFmpeg.cpp
@@ -185,7 +185,7 @@ int CDVDAudioCodecFFmpeg::Decode(BYTE* pData, int iSize)
 
     const void *ibuf[6] = { m_pBuffer1 };
     void       *obuf[6] = { m_pBuffer2 };
-    int         istr[6] = { m_dllAvUtil.av_get_bits_per_sample_fmt(m_pCodecContext->sample_fmt)/8 };
+    int         istr[6] = { m_dllAvUtil.av_get_bytes_per_sample(m_pCodecContext->sample_fmt) };
     int         ostr[6] = { 2 };
     int         len     = m_iBufferSize1 / istr[0];
     if(m_dllAvCodec.av_audio_convert(m_pConvert, obuf, ostr, ibuf, istr, len) < 0)
diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Audio/Encoders/DVDAudioEncoderFFmpeg.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Audio/Encoders/DVDAudioEncoderFFmpeg.cpp
index 6141982..0189e65 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Audio/Encoders/DVDAudioEncoderFFmpeg.cpp
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Audio/Encoders/DVDAudioEncoderFFmpeg.cpp
@@ -149,7 +149,7 @@ bool CDVDAudioEncoderFFmpeg::Initialize(unsigned int channels, enum PCMChannels
 
   if (m_AudioConvert)
       m_TmpBuffer2   = new uint8_t[m_NeededFrames * m_CodecCtx->channels *
-                                   m_dllAvUtil.av_get_bits_per_sample_fmt(m_CodecCtx->sample_fmt) / 8];
+                                   m_dllAvUtil.av_get_bytes_per_sample(m_CodecCtx->sample_fmt)];
 
   return true;
 }
@@ -186,7 +186,7 @@ int CDVDAudioEncoderFFmpeg::Encode(uint8_t *data, int size)
     void *convInBuf[] = { m_TmpBuffer };
     int convInStr[] = { m_BitsPerSample / 8 };
     void *convOutBuf[] = { m_TmpBuffer2 };
-    int convOutStr[] = { m_dllAvUtil.av_get_bits_per_sample_fmt(m_CodecCtx->sample_fmt) / 8 };
+    int convOutStr[] = { m_dllAvUtil.av_get_bytes_per_sample(m_CodecCtx->sample_fmt) };
     if (m_dllAvCodec.av_audio_convert(m_AudioConvert, convOutBuf, convOutStr,
                                       convInBuf, convInStr, m_NeededFrames * m_CodecCtx->channels) < 0) {
       CLog::Log(LOGERROR, "CDVDAudioEncoderFFmpeg: Audio conversion failed");
-- 
1.7.10

